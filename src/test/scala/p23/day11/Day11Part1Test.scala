package p23.day11

import org.scalatest.funsuite.{AnyFunSuite, AnyFunSuiteLike}
import p23.day11.Day11Part1.Point

import scala.io.Source

class Day11Part1Test extends AnyFunSuite {

  test("Test expansion") {
    val lines =
      """
        |...#......
        |.......#..
        |#.........
        |..........
        |......#...
        |.#........
        |.........#
        |..........
        |.......#..
        |#...#.....
        |""".stripMargin.trim

    val expected =
      """
        |....#........
        |.........#...
        |#............
        |.............
        |.............
        |........#....
        |.#...........
        |............#
        |.............
        |.............
        |.........#...
        |#....#.......
        |""".stripMargin.trim

    val matrix = Day11Part1.parse(lines)
    val expanded = Day11Part1.expandMatrix(matrix)
    val string = Day11Part1.toString(expanded)

    assert(string == expected)
  }

  test("Get tuples") {
    val lines =
      """
        |...#......
        |.......#..
        |#.........
        |..........
        |......#...
        |.#........
        |.........#
        |..........
        |.......#..
        |#...#.....
        |""".stripMargin.trim

    val matrix = Day11Part1.parse(lines)
    val tuples = Day11Part1.getAllTuples(matrix)

    assert(tuples.size == 36)
  }

  test("Get path length") {
    assert(Day11Part1.getPathLength(Point(1, 6), Point(5, 11)) == 9)
  }

  test("Test example") {
    val lines =
      """
        |...#......
        |.......#..
        |#.........
        |..........
        |......#...
        |.#........
        |.........#
        |..........
        |.......#..
        |#...#.....
        |""".stripMargin.trim

    val result = Day11Part1.check(lines)
    assert(result == 374)
  }

  test("Compute real case") {
    val result = Day11Part1.check(Source.fromResource("p23/day11/input.txt").mkString)
    assert(result == 9639160)
  }
}
